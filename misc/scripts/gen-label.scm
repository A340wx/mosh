(import (rnrs) (match) (except (mosh) make-instruction) (srfi :26))

(define ash bitwise-arithmetic-shift)

;; same as Object::makeInt
(define (make-int i)
  (+ (ash i 2) 1))

(define (make-instruction i)
  (+ (ash i 5) 14))

(define (make-seq s e)
  (let loop ([s s]
             [ret '()])
    (if (> s e)
        (reverse ret)
        (loop (+ s 1) (cons s ret)))))

(define (print-insn lst op)
  (define (print x) (display x op) (newline op))
  (format op "// Do not edit this file generated by ~a\n" (car (command-line)))
  (format op "static void* dispatch_table[~d] = {\n" (make-instruction (length lst)))
  (let ((insn-indexes (map make-instruction (make-seq 0 (- (length lst) 1)))))
    (let loop ([i 0]
               [lst lst])
      (cond
       [(null? lst)
        '()]
       [(memq i insn-indexes)
        (format op "&&LABEL_~a,\n" (car lst))
        (loop (+ i 1) (cdr lst))]
       [else
        (print "&&LABEL_DEFAULT,")
        (loop (+ i 1) lst)])))
  (print "};"))

(define (read-input name)
   (with-input-from-file name
     (lambda ()
       (let loop ([obj (read)]
                  [ret '()])
         (if (eof-object? obj)
             (reverse ret)
             (match obj
               [('define-insn name n)
                (loop (read) (cons name ret))]))))))

(let* ((names (cdr (command-line)))
       (in-name (car names))
       (out-name (cadr names)))
  (when (file-exists? out-name) (delete-file out-name))
  (let ((lst (read-input in-name)))
    (call-with-output-file 
      out-name
      (cut print-insn lst <>)))
  0)
