(define current-directory (lambda () #f))
(define mosh-executable-path (lambda () #f))
(define standard-library-path (lambda () #f))
(define make-hashtable (lambda (x y) #f))
(define make-record-type-descriptor (lambda e #f))
(define make-record-constructor-descriptor (lambda e #f))
(define hashtable-set! (lambda e #f))
(define record-constructor (lambda e #f))
(define record-predicate (lambda e #f))
(define record-accessor (lambda e #f))
(define condition-predicate (lambda e #f))
(define condition-accessor (lambda e #f))
(define hashtable-ref (lambda e #f))
(define %loadpath #f)
(define get-environment-variable (lambda e #f))
(define (host-os) "gauche")
(define library-path #f)
(define (raise-syntax-violation form subform who message trace) (error (list 'SYNTAX-VIOLATION form subform who message trace)))
(define command-line (lambda e #f))

(define true-gensym gensym)
(set! gensym (lambda e
	       (let ((sym (apply true-gensym e)))
		 (string->symbol (symbol->string sym)))))

(define (eval-core l) (eval l (interaction-environment)))
